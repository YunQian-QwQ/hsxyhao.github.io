<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hsxyhao.github.io</id>
    <title>Madara</title>
    <updated>2019-12-15T08:54:41.855Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hsxyhao.github.io"/>
    <link rel="self" href="https://hsxyhao.github.io/atom.xml"/>
    <subtitle>这个人很懒，什么都不想写...</subtitle>
    <logo>https://hsxyhao.github.io/images/avatar.png</logo>
    <icon>https://hsxyhao.github.io/favicon.ico</icon>
    <rights>All rights reserved 2019, Madara</rights>
    <entry>
        <title type="html"><![CDATA[微博、微信公众号开放API]]></title>
        <id>https://hsxyhao.github.io/post/ce-shi-fen-ye-1</id>
        <link href="https://hsxyhao.github.io/post/ce-shi-fen-ye-1">
        </link>
        <updated>2019-12-13T07:09:27.000Z</updated>
    </entry>
    <entry>
        <title type="html"><![CDATA[消息队列学习开篇]]></title>
        <id>https://hsxyhao.github.io/post/xiao-xi-dui-lie-xue-xi-kai-pian</id>
        <link href="https://hsxyhao.github.io/post/xiao-xi-dui-lie-xue-xi-kai-pian">
        </link>
        <updated>2019-12-10T01:20:16.000Z</updated>
        <summary type="html"><![CDATA[<p>什么是消息队列？消息队列有哪些？又解决了哪些问题？该怎么选择消息队列？使用消息队列的时候会遇到哪些问题？带着这些疑问先对消息队列进行初步了解。<br>
<img src="https://hsxyhao.github.io/post-images/1576199469901.png" alt=""></p>
<h1 id="介绍">介绍</h1>
<blockquote>
<p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。<br>
一个 WIMP 环境像是 Microsoft Windows，借由优先的某些形式（通常是事件的时间或是重要性的顺序）来存储用户产生的事件到一个 事件贮列 中。系统把每个事件从事件贮列中传递给目标的应用程序。<br>
<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">——摘自维基百科</a></p>
</blockquote>
<p>维基百科中的解释，但是总感觉一大串术语，又是进程又是通信的，还有各种设备什么的。对于小白来说就用最简单的一句话就行了，消息队列就是用来发送和接收消息的<strong>队列</strong>，发送消息方叫作<strong>生产者</strong>，接收消息方叫作<strong>消费者</strong>。</p>
<blockquote>
<p>不要纠结这些专业术语了，我们了解消息队列主要用来业务上的问题的，老是按照专业的角度去理解多费事😜</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p>什么是消息队列？消息队列有哪些？又解决了哪些问题？该怎么选择消息队列？使用消息队列的时候会遇到哪些问题？带着这些疑问先对消息队列进行初步了解。<br>
<img src="https://hsxyhao.github.io/post-images/1576199469901.png" alt=""></p>
<h1 id="介绍">介绍</h1>
<blockquote>
<p>在计算机科学中，消息队列（英语：Message queue）是一种进程间通信或同一进程的不同线程间的通信方式，软件的贮列用来处理一系列的输入，通常是来自用户。消息队列提供了异步的通信协议，每一个贮列中的纪录包含详细说明的数据，包含发生的时间，输入设备的种类，以及特定的输入参数，也就是说：消息的发送者和接收者不需要同时与消息队列交互。消息会保存在队列中，直到接收者取回它。<br>
一个 WIMP 环境像是 Microsoft Windows，借由优先的某些形式（通常是事件的时间或是重要性的顺序）来存储用户产生的事件到一个 事件贮列 中。系统把每个事件从事件贮列中传递给目标的应用程序。<br>
<a href="https://zh.wikipedia.org/wiki/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">——摘自维基百科</a></p>
</blockquote>
<p>维基百科中的解释，但是总感觉一大串术语，又是进程又是通信的，还有各种设备什么的。对于小白来说就用最简单的一句话就行了，消息队列就是用来发送和接收消息的<strong>队列</strong>，发送消息方叫作<strong>生产者</strong>，接收消息方叫作<strong>消费者</strong>。</p>
<blockquote>
<p>不要纠结这些专业术语了，我们了解消息队列主要用来业务上的问题的，老是按照专业的角度去理解多费事😜</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis淘汰机制]]></title>
        <id>https://hsxyhao.github.io/post/redis-tao-tai-ji-zhi</id>
        <link href="https://hsxyhao.github.io/post/redis-tao-tai-ji-zhi">
        </link>
        <updated>2019-12-05T06:01:00.000Z</updated>
        <summary type="html"><![CDATA[<p>redis淘汰策略有哪些？lru、lfu，lru算法改进</p>
]]></summary>
        <content type="html"><![CDATA[<p>redis淘汰策略有哪些？lru、lfu，lru算法改进</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim命令]]></title>
        <id>https://hsxyhao.github.io/post/vim-ming-ling-ji-lu</id>
        <link href="https://hsxyhao.github.io/post/vim-ming-ling-ji-lu">
        </link>
        <updated>2019-12-05T01:00:51.000Z</updated>
        <summary type="html"><![CDATA[<p>记录让自己尴尬的vim命令😫</p>
]]></summary>
        <content type="html"><![CDATA[<p>记录让自己尴尬的vim命令😫</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis高可用]]></title>
        <id>https://hsxyhao.github.io/post/redis-gao-ke-yong</id>
        <link href="https://hsxyhao.github.io/post/redis-gao-ke-yong">
        </link>
        <updated>2019-11-23T09:51:53.000Z</updated>
        <summary type="html"><![CDATA[<p>Redis的高可用实现方案有哪些，为什么要选择官方的哨兵模式，自己开发自动化故障转移脚本有什么问题。redis cluster重定向有几种？redis数据分区...</p>
]]></summary>
        <content type="html"><![CDATA[<p>Redis的高可用实现方案有哪些，为什么要选择官方的哨兵模式，自己开发自动化故障转移脚本有什么问题。redis cluster重定向有几种？redis数据分区...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis复制]]></title>
        <id>https://hsxyhao.github.io/post/redis-copy</id>
        <link href="https://hsxyhao.github.io/post/redis-copy">
        </link>
        <updated>2019-11-19T08:19:22.000Z</updated>
        <summary type="html"><![CDATA[<p>什么是redis的复制，为什么要有复制功能，全量复制有什么问题，部分复制又解决了哪些问题。</p>
]]></summary>
        <content type="html"><![CDATA[<p>什么是redis的复制，为什么要有复制功能，全量复制有什么问题，部分复制又解决了哪些问题。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis 持久化]]></title>
        <id>https://hsxyhao.github.io/post/redis-chi-jiu-hua</id>
        <link href="https://hsxyhao.github.io/post/redis-chi-jiu-hua">
        </link>
        <updated>2019-11-16T09:04:43.000Z</updated>
        <summary type="html"><![CDATA[<p>持久化有哪几种方式，各有什么问题。每种持久化的流程是什么样的，AOF重写是什么机制，解决了什么问题，fork底层函数，COW机制。</p>
]]></summary>
        <content type="html"><![CDATA[<p>持久化有哪几种方式，各有什么问题。每种持久化的流程是什么样的，AOF重写是什么机制，解决了什么问题，fork底层函数，COW机制。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Redis入门知识点]]></title>
        <id>https://hsxyhao.github.io/post/rui-shi-jun-dao-redis</id>
        <link href="https://hsxyhao.github.io/post/rui-shi-jun-dao-redis">
        </link>
        <updated>2019-11-14T07:49:23.000Z</updated>
        <summary type="html"><![CDATA[<p>redis有哪些基础数据结构，什么是快速链表，什么是跳跃链表，使用redis特有的数据类型可以实现哪些有趣的功能。</p>
<blockquote>
<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://hsxyhao.github.io/post-images/1576199763145.png" alt=""></figure>
<p>上面一段话取自Redis官方的介绍，为什么要把它放在这里，我觉得这是介绍Redis最为标准的一段话，从用途、数据结构已经功能等多方面介绍，如果以后面试官叫你介绍下redis的话，我觉得可以直接把这段话背下来😌。至于为什么把Redis称为瑞士军刀，相信用过redis的人都会这么认为。</p>
]]></summary>
        <content type="html"><![CDATA[<p>redis有哪些基础数据结构，什么是快速链表，什么是跳跃链表，使用redis特有的数据类型可以实现哪些有趣的功能。</p>
<blockquote>
<p>Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.</p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://hsxyhao.github.io/post-images/1576199763145.png" alt=""></figure>
<p>上面一段话取自Redis官方的介绍，为什么要把它放在这里，我觉得这是介绍Redis最为标准的一段话，从用途、数据结构已经功能等多方面介绍，如果以后面试官叫你介绍下redis的话，我觉得可以直接把这段话背下来😌。至于为什么把Redis称为瑞士军刀，相信用过redis的人都会这么认为。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea搭建个人博客]]></title>
        <id>https://hsxyhao.github.io/post/gridea-setup</id>
        <link href="https://hsxyhao.github.io/post/gridea-setup">
        </link>
        <updated>2019-11-13T05:47:44.000Z</updated>
        <summary type="html"><![CDATA[<p>上大学的时候一直想弄一个博客系统，但是当时自己还是初学者，根本完不成，心想着等到以后技术长进一点之后准备弄一个，可是一直等到现在都没有弄起来。期间也玩过hexo、typecho等静态博客平台，但是当时没有好好管理，搭建好的博客在服务器到期后就没再弄了。无意间在掘金上看到了<a href="https://gridea.dev/">Gridea</a>，进入官网后发现颜值还挺高的，后面慢慢的了解后，才发现目前还是个小众平台，主题以及平台的功能都还不完善。但是平台提供写文章的功能还不错(好像当时没有使用hexo就是因为没有一个写文章的地方)，后来就决定使用它了。<br>
<img src="https://hsxyhao.github.io/post-images/1576203380178.png" alt=""><br>
顺带一张高颜值的美图欣赏一下🤣</p>
]]></summary>
        <content type="html"><![CDATA[<p>上大学的时候一直想弄一个博客系统，但是当时自己还是初学者，根本完不成，心想着等到以后技术长进一点之后准备弄一个，可是一直等到现在都没有弄起来。期间也玩过hexo、typecho等静态博客平台，但是当时没有好好管理，搭建好的博客在服务器到期后就没再弄了。无意间在掘金上看到了<a href="https://gridea.dev/">Gridea</a>，进入官网后发现颜值还挺高的，后面慢慢的了解后，才发现目前还是个小众平台，主题以及平台的功能都还不完善。但是平台提供写文章的功能还不错(好像当时没有使用hexo就是因为没有一个写文章的地方)，后来就决定使用它了。<br>
<img src="https://hsxyhao.github.io/post-images/1576203380178.png" alt=""><br>
顺带一张高颜值的美图欣赏一下🤣</p>
]]></content>
    </entry>
</feed>